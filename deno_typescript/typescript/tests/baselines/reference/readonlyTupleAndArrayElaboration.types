=== tests/cases/compiler/readonlyTupleAndArrayElaboration.ts ===
// @strict
// #Repro from #30839

let point = [3, 4] as const;
>point : readonly [3, 4]
>[3, 4] as const : readonly [3, 4]
>[3, 4] : readonly [3, 4]
>3 : 3
>4 : 4

function distanceFromOrigin([x, y]: [number, number]) {
>distanceFromOrigin : ([x, y]: [number, number]) => number
>x : number
>y : number

    return Math.sqrt(x ** 2 + y ** 2);
>Math.sqrt(x ** 2 + y ** 2) : number
>Math.sqrt : (x: number) => number
>Math : Math
>sqrt : (x: number) => number
>x ** 2 + y ** 2 : number
>x ** 2 : number
>x : number
>2 : 2
>y ** 2 : number
>y : number
>2 : 2
}

distanceFromOrigin(point);
>distanceFromOrigin(point) : number
>distanceFromOrigin : ([x, y]: [number, number]) => number
>point : readonly [3, 4]

declare function arryFn(x: number[]): void;
>arryFn : (x: number[]) => void
>x : number[]

arryFn(point);
>arryFn(point) : void
>arryFn : (x: number[]) => void
>point : readonly [3, 4]

declare function arryFn2(x: Array<number>): void;
>arryFn2 : (x: number[]) => void
>x : number[]

arryFn2(point);
>arryFn2(point) : void
>arryFn2 : (x: number[]) => void
>point : readonly [3, 4]

declare const a: readonly number[];
>a : readonly number[]

declare const b: Readonly<number[]>;
>b : readonly number[]

declare const c: ReadonlyArray<number>;
>c : readonly number[]

arryFn2(a);
>arryFn2(a) : void
>arryFn2 : (x: number[]) => void
>a : readonly number[]

arryFn2(b);
>arryFn2(b) : void
>arryFn2 : (x: number[]) => void
>b : readonly number[]

arryFn2(c);
>arryFn2(c) : void
>arryFn2 : (x: number[]) => void
>c : readonly number[]

