=== tests/cases/compiler/noImplicitAnyStringIndexerOnObject.ts ===
var a = {}["hello"];
>a : Symbol(a, Decl(noImplicitAnyStringIndexerOnObject.ts, 0, 3))

var b: string = { '': 'foo' }[''];
>b : Symbol(b, Decl(noImplicitAnyStringIndexerOnObject.ts, 1, 3))
>'' : Symbol('', Decl(noImplicitAnyStringIndexerOnObject.ts, 1, 17))
>'' : Symbol('', Decl(noImplicitAnyStringIndexerOnObject.ts, 1, 17))

var c = {
>c : Symbol(c, Decl(noImplicitAnyStringIndexerOnObject.ts, 3, 3))

  get: (key: string) => 'foobar'
>get : Symbol(get, Decl(noImplicitAnyStringIndexerOnObject.ts, 3, 9))
>key : Symbol(key, Decl(noImplicitAnyStringIndexerOnObject.ts, 4, 8))

};
c['hello'];
>c : Symbol(c, Decl(noImplicitAnyStringIndexerOnObject.ts, 3, 3))

const foo = c['hello'];
>foo : Symbol(foo, Decl(noImplicitAnyStringIndexerOnObject.ts, 7, 5))
>c : Symbol(c, Decl(noImplicitAnyStringIndexerOnObject.ts, 3, 3))

var d = {
>d : Symbol(d, Decl(noImplicitAnyStringIndexerOnObject.ts, 9, 3))

  set: (key: string) => 'foobar'
>set : Symbol(set, Decl(noImplicitAnyStringIndexerOnObject.ts, 9, 9))
>key : Symbol(key, Decl(noImplicitAnyStringIndexerOnObject.ts, 10, 8))

};
const bar = d['hello'];
>bar : Symbol(bar, Decl(noImplicitAnyStringIndexerOnObject.ts, 12, 5))
>d : Symbol(d, Decl(noImplicitAnyStringIndexerOnObject.ts, 9, 3))

var e = {
>e : Symbol(e, Decl(noImplicitAnyStringIndexerOnObject.ts, 14, 3))

  set: (key: string) => 'foobar',
>set : Symbol(set, Decl(noImplicitAnyStringIndexerOnObject.ts, 14, 9))
>key : Symbol(key, Decl(noImplicitAnyStringIndexerOnObject.ts, 15, 8))

  get: (key: string) => 'foobar'
>get : Symbol(get, Decl(noImplicitAnyStringIndexerOnObject.ts, 15, 33))
>key : Symbol(key, Decl(noImplicitAnyStringIndexerOnObject.ts, 16, 8))

};
e['hello'] = 'modified';
>e : Symbol(e, Decl(noImplicitAnyStringIndexerOnObject.ts, 14, 3))

e['hello'] += 1;
>e : Symbol(e, Decl(noImplicitAnyStringIndexerOnObject.ts, 14, 3))

e['hello'] ++;
>e : Symbol(e, Decl(noImplicitAnyStringIndexerOnObject.ts, 14, 3))

const o = { a: 0 };
>o : Symbol(o, Decl(noImplicitAnyStringIndexerOnObject.ts, 22, 5))
>a : Symbol(a, Decl(noImplicitAnyStringIndexerOnObject.ts, 22, 11))

declare const k: "a" | "b" | "c";
>k : Symbol(k, Decl(noImplicitAnyStringIndexerOnObject.ts, 24, 13))

o[k];
>o : Symbol(o, Decl(noImplicitAnyStringIndexerOnObject.ts, 22, 5))
>k : Symbol(k, Decl(noImplicitAnyStringIndexerOnObject.ts, 24, 13))


declare const k2: "c";
>k2 : Symbol(k2, Decl(noImplicitAnyStringIndexerOnObject.ts, 28, 13))

o[k2];
>o : Symbol(o, Decl(noImplicitAnyStringIndexerOnObject.ts, 22, 5))
>k2 : Symbol(k2, Decl(noImplicitAnyStringIndexerOnObject.ts, 28, 13))

declare const sym : unique symbol;
>sym : Symbol(sym, Decl(noImplicitAnyStringIndexerOnObject.ts, 31, 13))

o[sym];
>o : Symbol(o, Decl(noImplicitAnyStringIndexerOnObject.ts, 22, 5))
>sym : Symbol(sym, Decl(noImplicitAnyStringIndexerOnObject.ts, 31, 13))

enum NumEnum { a, b }
>NumEnum : Symbol(NumEnum, Decl(noImplicitAnyStringIndexerOnObject.ts, 32, 7))
>a : Symbol(NumEnum.a, Decl(noImplicitAnyStringIndexerOnObject.ts, 34, 14))
>b : Symbol(NumEnum.b, Decl(noImplicitAnyStringIndexerOnObject.ts, 34, 17))

let numEnumKey: NumEnum;
>numEnumKey : Symbol(numEnumKey, Decl(noImplicitAnyStringIndexerOnObject.ts, 35, 3))
>NumEnum : Symbol(NumEnum, Decl(noImplicitAnyStringIndexerOnObject.ts, 32, 7))

o[numEnumKey];
>o : Symbol(o, Decl(noImplicitAnyStringIndexerOnObject.ts, 22, 5))
>numEnumKey : Symbol(numEnumKey, Decl(noImplicitAnyStringIndexerOnObject.ts, 35, 3))


enum StrEnum { a = "a", b = "b" }
>StrEnum : Symbol(StrEnum, Decl(noImplicitAnyStringIndexerOnObject.ts, 36, 14))
>a : Symbol(StrEnum.a, Decl(noImplicitAnyStringIndexerOnObject.ts, 39, 14))
>b : Symbol(StrEnum.b, Decl(noImplicitAnyStringIndexerOnObject.ts, 39, 23))

let strEnumKey: StrEnum;
>strEnumKey : Symbol(strEnumKey, Decl(noImplicitAnyStringIndexerOnObject.ts, 40, 3))
>StrEnum : Symbol(StrEnum, Decl(noImplicitAnyStringIndexerOnObject.ts, 36, 14))

o[strEnumKey];
>o : Symbol(o, Decl(noImplicitAnyStringIndexerOnObject.ts, 22, 5))
>strEnumKey : Symbol(strEnumKey, Decl(noImplicitAnyStringIndexerOnObject.ts, 40, 3))

