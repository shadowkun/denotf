// Copyright 2019 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include 'src/builtins/builtins-regexp-gen.h'

namespace regexp {

  extern transitioning macro RegExpBuiltinsAssembler::RegExpCreate(
      implicit context: Context)(Context, Object, String): Object;

  extern transitioning macro
  RegExpMatchAllAssembler::CreateRegExpStringIterator(
      NativeContext, Object, String, bool, bool): JSAny;

  const kRegExpMatchAllWithNonGlobalRegExp: constexpr int31
  generates 'v8::Isolate::kRegExpMatchAllWithNonGlobalRegExp';

  @export
  transitioning macro RegExpPrototypeMatchAllImpl(implicit context: Context)(
      nativeContext: NativeContext, receiver: JSAny, string: JSAny): JSAny {
    // 1. Let R be the this value.
    // 2. If Type(R) is not Object, throw a TypeError exception.
    ThrowIfNotJSReceiver(
        receiver, kIncompatibleMethodReceiver, 'RegExp.prototype.@@matchAll');
    const receiver = UnsafeCast<JSReceiver>(receiver);

    // 3. Let S be ? ToString(O).
    const string: String = ToString_Inline(context, string);

    let matcher: Object;
    let global: bool;
    let unicode: bool;

    // 'FastJSRegExp' uses the strict fast path check because following code
    // uses the flags property.
    // TODO(jgruber): Handle slow flag accesses on the fast path and make this
    // permissive.
    typeswitch (receiver) {
      case (fastRegExp: FastJSRegExp): {
        const source = fastRegExp.source;

        // 4. Let C be ? SpeciesConstructor(R, %RegExp%).
        // 5. Let flags be ? ToString(? Get(R, "flags")).
        // 6. Let matcher be ? Construct(C, « R, flags »).
        const flags: String = FastFlagsGetter(fastRegExp);
        matcher = RegExpCreate(nativeContext, source, flags);
        const matcherRegExp = UnsafeCast<JSRegExp>(matcher);
        assert(IsFastRegExpPermissive(matcherRegExp));

        // 7. Let lastIndex be ? ToLength(? Get(R, "lastIndex")).
        // 8. Perform ? Set(matcher, "lastIndex", lastIndex, true).
        const fastRegExp = UnsafeCast<FastJSRegExp>(receiver);
        FastStoreLastIndex(matcherRegExp, fastRegExp.lastIndex);

        // 9. If flags contains "g", let global be true.
        // 10. Else, let global be false.
        global = FastFlagGetter(matcherRegExp, kGlobal);

        // 11. If flags contains "u", let fullUnicode be true.
        // 12. Else, let fullUnicode be false.
        unicode = FastFlagGetter(matcherRegExp, kUnicode);
      }
      case (Object): {
        // 4. Let C be ? SpeciesConstructor(R, %RegExp%).
        const regexpFun =
            UnsafeCast<JSFunction>(nativeContext[REGEXP_FUNCTION_INDEX]);
        const speciesConstructor =
            UnsafeCast<Constructor>(SpeciesConstructor(receiver, regexpFun));

        // 5. Let flags be ? ToString(? Get(R, "flags")).
        const flags = GetProperty(receiver, 'flags');
        const flagsString = ToString_Inline(context, flags);

        // 6. Let matcher be ? Construct(C, « R, flags »).
        matcher = Construct(speciesConstructor, receiver, flagsString);

        // 7. Let lastIndex be ? ToLength(? Get(R, "lastIndex")).
        const lastIndex: Number =
            ToLength_Inline(context, SlowLoadLastIndex(receiver));

        // 8. Perform ? Set(matcher, "lastIndex", lastIndex, true).
        SlowStoreLastIndex(UnsafeCast<JSReceiver>(matcher), lastIndex);

        // 9. If flags contains "g", let global be true.
        // 10. Else, let global be false.
        const globalCharString: String = StringConstant('g');
        const globalIndex: Smi =
            StringIndexOf(flagsString, globalCharString, 0);
        global = globalIndex != -1;

        // 11. If flags contains "u", let fullUnicode be true.
        // 12. Else, let fullUnicode be false.
        const unicodeCharString = StringConstant('u');
        const unicodeIndex: Smi =
            StringIndexOf(flagsString, unicodeCharString, 0);
        unicode = unicodeIndex != -1;
      }
    }

    // UseCounter for matchAll with non-g RegExp.
    // https://crbug.com/v8/9551
    if (!global) {
      IncrementUseCounter(
          context, SmiConstant(kRegExpMatchAllWithNonGlobalRegExp));
    }

    // 13. Return ! CreateRegExpStringIterator(matcher, S, global, fullUnicode).
    return CreateRegExpStringIterator(
        nativeContext, matcher, string, global, unicode);
  }

  // https://tc39.github.io/proposal-string-matchall/
  // RegExp.prototype [ @@matchAll ] ( string )
  transitioning javascript builtin RegExpPrototypeMatchAll(
      js-implicit context: Context, receiver: JSAny)(string: JSAny): JSAny {
    const nativeContext: NativeContext = LoadNativeContext(context);
    return RegExpPrototypeMatchAllImpl(nativeContext, receiver, string);
  }
}
